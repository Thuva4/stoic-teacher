{"version":3,"sources":["components/Cards/CardLineChart.js","components/Cards/CardStats.js","components/Headers/HeaderStats.js","utils/Insights.js","index.js","views/Dashboard.js"],"names":["CardLineChart","xScale","dataSet","React","useEffect","config","type","data","labels","datasets","options","scales","xAxes","time","displayFormats","ctx","document","getElementById","label","getContext","window","myLine","Chart","className","id","CardStats","statSubtitle","change","stat","statDescripiron","statIconName","statIconColor","defaultProps","statTitle","statArrow","HeaderStats","cards","currentTime","Date","getTime","dateString","Math","floor","timeStamp","account","compareInsights","push","followers","processData","dataSets","fill","backgroundColor","borderColor","accounts","accountIndex","ReactDOM","render","basename","process","path","exact","component","useState","charts","setCharts","pastInsights","from","to"],"mappings":"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","file":"static/js/main.42a74091.chunk.js","sourcesContent":["import React from \"react\";\nimport Chart from \"chart.js\";\n\nexport default function CardLineChart({xScale, dataSet}) {\n  React.useEffect(() => {\n    var config = {\n      type: 'line',\n      data: {\n        labels: xScale,\n        datasets: [dataSet]\n      },\n      options: {\n        scales: {\n          xAxes: [{\n            type: 'time',\n            time: {\n              displayFormats: {\n                'millisecond': 'MMM DD',\n                'second': 'MMM DD',\n                'minute': 'MMM DD',\n                'hour': 'MMM DD',\n                'day': 'MMM DD',\n                'week': 'MMM DD',\n                'month': 'MMM DD',\n                'quarter': 'MMM DD',\n                'year': 'MMM DD',\n              }\n            }\n          }],\n        },\n      }\n    };\n    var ctx = document.getElementById(`line-chart-${dataSet.label}`).getContext(\"2d\");\n    window.myLine = new Chart(ctx, config);\n  }, [xScale, dataSet]);\n  return (\n    <>\n      <div className=\"relative flex flex-col break-words w-full lg:w-6/12 xl:w-6/12 mb-6 shadow-lg rounded\">\n        <div className=\"p-4 flex-auto\">\n          <div className=\"relative\">\n            <canvas id={`line-chart-${dataSet.label}`}></canvas>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function CardStats({\n  statSubtitle,\n  change,\n  stat,\n  statDescripiron,\n  statIconName,\n  statIconColor,\n}) {\n  return (\n    <>\n      <div className=\"relative flex flex-col min-w-0 break-words bg-white rounded mb-6 xl:mb-0 shadow-lg\">\n        <div className=\"flex-auto p-4\">\n          <div className=\"flex flex-wrap\">\n            <div className=\"relative w-full pr-4 max-w-full flex-grow flex-1\">\n              <h5 className=\"text-blueGray-400 uppercase font-bold text-xs\">\n                {statSubtitle}\n              </h5>\n              <span className=\"font-semibold text-xl text-blueGray-700\">\n                {`${stat} (${change > 0 ? `+${change}` : change})`}\n              </span>\n            </div>\n            <div className=\"relative w-auto pl-4 flex-initial\">\n              <div\n                className={\n                  \"text-white p-3 text-center inline-flex items-center justify-center w-12 h-12 shadow-lg rounded-full \" +\n                  statIconColor\n                }\n              >\n                <i className={statIconName}></i>\n              </div>\n            </div>\n          </div>\n          <p className=\"text-sm text-blueGray-400 mt-4\">\n            <span className=\"whitespace-nowrap\">{statDescripiron}</span>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nCardStats.defaultProps = {\n  statSubtitle: \"Traffic\",\n  statTitle: \"350,897\",\n  statArrow: \"up\",\n  statDescripiron: \"Since last month\",\n  statIconName: \"far fa-chart-bar\",\n  statIconColor: \"bg-red-500\",\n};\n\nCardStats.propTypes = {\n  statSubtitle: PropTypes.string,\n  statTitle: PropTypes.string,\n  statArrow: PropTypes.oneOf([\"up\", \"down\"]),\n  statPercent: PropTypes.string,\n  // can be any of the text color utilities\n  // from tailwindcss\n  statPercentColor: PropTypes.string,\n  statDescripiron: PropTypes.string,\n  statIconName: PropTypes.string,\n  // can be any of the background color utilities\n  // from tailwindcss\n  statIconColor: PropTypes.string,\n};\n","import React from \"react\";\n\n// components\n\nimport CardStats from \"components/Cards/CardStats.js\";\nimport compareInsights from \"../../data/compare_insights.json\";\nimport { followers, timeStamp } from \"../../data/current_insights.json\";\nexport default function HeaderStats() {\n  const cards = [];\n  const currentTime = new Date().getTime()\n  const dateString = Math.floor((currentTime - timeStamp)/(1000 * 60));\n  for (const account in compareInsights) {\n    cards.push(\n      <div className=\"w-full lg:w-3/12 xl:w-3/12 px-4 m-2\">\n        <CardStats\n          statSubtitle={account}\n          stat={followers[account]}\n          change={compareInsights[account]}\n          statDescripiron={`Last run ${dateString} Minutes ago`}\n          statIconName=\"far fa-chart-bar\"\n          statIconColor=\"bg-red-500\"\n        />\n      </div>\n    );\n  }\n  return (\n    <>\n      {/* Header */}\n      <div className=\"relative bg-lightBlue-600\">\n        <div className=\"px-4 md:px-10 mx-auto w-full\">\n          <div>\n            {/* Card stats */}\n            <div className=\"flex flex-wrap  justify-center items-center\">\n              {cards}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","const processData = (data) => {\n  const xScale = [];\n  const dataSets = [\n    {\n      label: \"Twitter\",\n      data: [],\n      fill: false,\n      backgroundColor: \"#8a3ab9\",\n      borderColor: \"#8a3ab9\",\n    },\n    {\n      label: \"Facebook\",\n      data: [],\n      fill: false,\n      backgroundColor: \"#4c68d7\",\n      borderColor: \"#4c68d7\",\n    },\n    {\n      label: \"Instagram\",\n      data: [],\n      fill: false,\n      backgroundColor: \"#e95950\",\n      borderColor: \"#e95950\",\n    },\n    {\n      label: \"Reddit\",\n      data: [],\n      fill: false,\n      backgroundColor: \"#cd486b\",\n      borderColor: \"#cd486b\",\n    },\n    {\n      label: \"Medium\",\n      data: [],\n      fill: false,\n      backgroundColor: \"#00FF00\",\n      borderColor: \"#00FF00\",\n    },\n    {\n      label: \"Youtube\",\n      data: [],\n      fill: false,\n      backgroundColor: \"#FF0000\",\n      borderColor: \"#FF0000\",\n    },\n  ];\n\n  const accounts = [\"twitter\", \"facebook\", \"instagram\", \"reddit\", \"medium\", 'youtube'];\n  for (const timeStamp in data) {\n    xScale.push(new Date(+timeStamp));\n\n    for (const accountIndex in accounts) {\n      dataSets[accountIndex].data.push(data[timeStamp][accounts[accountIndex]]);\n    }\n  }\n  return {\n    xScale,\n    dataSets,\n  };\n};\n\nexport default processData;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"assets/styles/tailwind.css\";\n\nimport Dashboard from \"views/Dashboard\";\nconst routerBaseName = process.env.PUBLIC_URL;\n\nReactDOM.render(\n  <BrowserRouter basename={routerBaseName}>\n    <Switch>\n      <Route path=\"/\" exact component={Dashboard} />\n      <Redirect from=\"*\" to=\"/\" />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n","import React from \"react\";\n\nimport CardLineChart from \"components/Cards/CardLineChart.js\";\nimport HeaderStats from \"components/Headers/HeaderStats\";\nimport processData from \"utils/Insights\";\n\nimport pastInsights from \"../data/past_insights.json\";\n\nexport default function Dashboard() {\n  const [charts, setCharts] = React.useState([]);\n  React.useEffect(() => {\n    const { xScale, dataSets } = processData(pastInsights);\n    for (const dataSet of dataSets) {\n      setCharts((charts) => [\n        ...charts,\n        <CardLineChart xScale={xScale} dataSet={dataSet} key={dataSet.label} />,\n      ]);\n    }\n  }, []);\n  return (\n    <>\n      <HeaderStats />\n      <div className=\"flex flex-wrap\">\n        <div className=\"w-full mb-12 xl:mb-0 px-4 flex flex-wrap\">{charts}</div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}